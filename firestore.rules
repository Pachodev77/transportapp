rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    function isRole(role) {
      return isAuthenticated() && getUserRole(request.auth.uid) == role;
    }

    // Users collection rules
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow list: if isRole('admin');
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAuthenticated();
    }

    // Trips collection rules
    match /trips/{tripId} {
      // Allow read if authenticated and you're the driver, passenger, or an admin
      allow get: if isAuthenticated() && 
                (request.auth.uid == resource.data.driverId || 
                 request.auth.uid == resource.data.passengerId ||
                 isRole('admin'));
      
      // Allow list if authenticated and querying by driverId or passengerId, or if admin
      allow list: if isAuthenticated() && (
                   (request.query.keys().hasOnly(['driverId']) && request.query.driverId == request.auth.uid) ||
                   (request.query.keys().hasOnly(['passengerId']) && request.query.passengerId == request.auth.uid) ||
                   isRole('admin') ||
                   // Allow listing available trips for all authenticated users
                   (request.query.keys().hasOnly(['status']) && request.query.status == 'available')
                 );
      
      // Allow create if authenticated and the trip is properly formed
      allow create: if isAuthenticated() && 
                   (request.resource.data.driverId == request.auth.uid || 
                    request.resource.data.passengerId == request.auth.uid) &&
                   request.resource.data.status in ['pending', 'searching'] &&
                   request.resource.data.origin is map &&
                   request.resource.data.destination is map;
      
      // Allow updates to status by driver or passenger, or admin
      allow update: if isAuthenticated() && 
                   (isOwner(resource.data.driverId) || 
                    isOwner(resource.data.passengerId) ||
                    isRole('admin')) &&
                   request.resource.data.keys().hasOnly(['status', 'updatedAt', 'driverId', 'acceptedAt', 'completedAt', 'availableSeats']);
      
      // Allow delete only by the driver or admin
      allow delete: if isAuthenticated() && 
                   (isOwner(resource.data.driverId) || isRole('admin'));
    }
    
    // Bookings collection rules
    match /bookings/{bookingId} {
      // Allow read if you're the driver, passenger, or an admin
      allow read: if isAuthenticated() && 
                 (request.auth.uid == resource.data.driverId || 
                  request.auth.uid == resource.data.passengerId ||
                  isRole('admin'));
      
      // Allow create if authenticated and the passenger is the one creating it
      allow create: if isAuthenticated() && request.resource.data.passengerId == request.auth.uid;
      
      // Allow update by driver, passenger, or admin
      allow update: if isAuthenticated() &&
                   (isOwner(resource.data.driverId) || 
                    isOwner(resource.data.passengerId) ||
                    isRole('admin')) &&
                   request.resource.data.keys().hasOnly(['status', 'updatedAt']);
    }
    
    // Ratings collection rules
    match /ratings/{ratingId} {
      // Allow read for authenticated users
      allow read: if isAuthenticated();
      
      // Allow create if authenticated and the rater is the one creating it
      allow create: if isAuthenticated() && request.resource.data.raterId == request.auth.uid;
      
      // No updates or deletes after creation
      allow update, delete: if false;
    }

    // System collection (for app configuration, etc.)
    match /_system/{document=**} {
      // Only admins can read/write system settings
      allow read, write: if isRole('admin');
    }
  }
}